Chapter 8 - Controlling access to object
========================================


8.1 - Controlling access to properties with getters and setters
---------------------------------------------------------------


8.1.1 - Defining getters and setters
------------------------------------
-In JavaSCript, getter and setter methods can be defined in two ways:
1. specifying them within object literals or within ES6 class definitions
2. By using the built-in Object.defineProperty method

-We can also use the getters and setters with ES6 classes

-We don't always have to define both a getter and a setter for a given property,
for example, often we'll want to provide only a getter

-Because with object literals and classes our getter and setter methods aren't
created within the same function scope as variables that we could use for private properties,
we can't have private variable. But we can use Object.defineProperty method


8.1.2 - Using getters and setters to validate property values
-------------------------------------------------------------
-We can check whether the passed-in value is a data types we want in our setters
method


8.1.3 - Using getters and setters to define computed properties
---------------------------------------------------------------
-computed properties: properties whose value is calculated per request


8.2 - Using proxies to control access
--------------------------------------
-proxy: a surrogate through which we control access to another object
-Proxy constructor is built in as in ES6
-Proxy constructor takes as its first argument the target object and the second argument
is an object with traps (functions that will be called when certain actions are
performed on an object)

-Through a Proxy constructor, we create a proxy object that controls access to the
target object by activating certain traps whenever an operation is performed
directly on a proxy

-Some built-in traps in proxy:
1. apply trap will be activated when calling a function
2. new trap will be activated when using the new operator
3. get and set trap will be activated when reading/writing a property
4. enumerate trap will be activated for for-in statements
5. getPrototypeOf and setPrototypeOf will be activated for getting and setting
the prorotype value

8.2.1 - Using proxies for logging
--------------------------------
-See code (P. 214)

8.2.2 - Using proxies for measuring performance
------------------------------------------------
-See code (P. 216)

8.2.3 - Using proxies to autopopulate properties
------------------------------------------------
-See code (P. 217)


8.2.4 - Using proxies to implement negative array indexes
---------------------------------------------------------
-See code (P. 219)


8.2.5 - Performance costs of proxies
------------------------------------
-Proxy introduces a significant amount of additional processing that impacts
performance because our operations have to pass through a layer of inderection that
enable us to implement all these cool features

-See code (P. 221)
